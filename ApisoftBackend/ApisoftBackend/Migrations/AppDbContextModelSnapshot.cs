// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Contexts;

#nullable disable

namespace ApisoftBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryVehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BrandId");

                    b.HasIndex("CategoryVehicleId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Entities.Models.CategoryVehicle", b =>
                {
                    b.Property<int>("CategoryVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("CategoryVehicleId");

                    b.ToTable("CategoryVehicle");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Property<int>("DocumentNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direction")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocumentNum");

                    b.HasIndex("Type");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Entities.Models.PriceServiceCategory", b =>
                {
                    b.Property<int>("PriceServiceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryVehicleId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("PriceServiceCategoryId");

                    b.HasIndex("CategoryVehicleId");

                    b.HasIndex("ServiceId");

                    b.ToTable("PriceServiceCategory");
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.Property<int>("RepairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DocumentNumU")
                        .HasColumnType("int");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("RepairId");

                    b.HasIndex("DocumentNumU");

                    b.HasIndex("Plate");

                    b.ToTable("Repair");
                });

            modelBuilder.Entity("Entities.Models.RepairService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PriceServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("RepairId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("PriceServiceCategoryId");

                    b.HasIndex("RepairId");

                    b.HasIndex("ServiceId");

                    b.ToTable("RepairService");
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Entities.Models.StatusVehicle", b =>
                {
                    b.Property<int>("StatusVehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("StatusVehicleId");

                    b.ToTable("StatusVehicle");
                });

            modelBuilder.Entity("Entities.Models.TypeDocument", b =>
                {
                    b.Property<string>("Type")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Type");

                    b.ToTable("TypeDocument");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<int>("DocumentNumU")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direction")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstSurname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("DocumentNumU");

                    b.HasIndex("Type");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Models.Vehicle", b =>
                {
                    b.Property<string>("Plate")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientDocumentNum")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Mileage")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ModelYear")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("StatusVehicleId")
                        .HasColumnType("int");

                    b.HasKey("Plate");

                    b.HasIndex("BrandId");

                    b.HasIndex("ClientDocumentNum");

                    b.HasIndex("StatusVehicleId");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.HasOne("Entities.Models.CategoryVehicle", "CategoryVehicle")
                        .WithMany("Brands")
                        .HasForeignKey("CategoryVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryVehicle");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.HasOne("Entities.Models.TypeDocument", "TypeDocument")
                        .WithMany("Clients")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("Entities.Models.PriceServiceCategory", b =>
                {
                    b.HasOne("Entities.Models.CategoryVehicle", "CategoryVehicle")
                        .WithMany()
                        .HasForeignKey("CategoryVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryVehicle");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Repairs")
                        .HasForeignKey("DocumentNumU")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("Plate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Entities.Models.RepairService", b =>
                {
                    b.HasOne("Entities.Models.PriceServiceCategory", "PriceServiceCategory")
                        .WithMany()
                        .HasForeignKey("PriceServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Repair", "Repair")
                        .WithMany()
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Service", "Service")
                        .WithMany("RepairsServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PriceServiceCategory");

                    b.Navigation("Repair");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasOne("Entities.Models.TypeDocument", "TypeDocument")
                        .WithMany("Users")
                        .HasForeignKey("Type")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("Entities.Models.Vehicle", b =>
                {
                    b.HasOne("Entities.Models.Brand", "Brand")
                        .WithMany("Vehicles")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientDocumentNum");

                    b.HasOne("Entities.Models.StatusVehicle", "StatusVehicle")
                        .WithMany("Vehicles")
                        .HasForeignKey("StatusVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Client");

                    b.Navigation("StatusVehicle");
                });

            modelBuilder.Entity("Entities.Models.Brand", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entities.Models.CategoryVehicle", b =>
                {
                    b.Navigation("Brands");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entities.Models.Service", b =>
                {
                    b.Navigation("RepairsServices");
                });

            modelBuilder.Entity("Entities.Models.StatusVehicle", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Entities.Models.TypeDocument", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Repairs");
                });
#pragma warning restore 612, 618
        }
    }
}
